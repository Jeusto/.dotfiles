[
  // Remove conflicting/useless keybindings
  {
    "key": "ctrl+k",
    "command": "",
    "when": ""
  },
  // Terminal like editor actions
  {
    "key": "ctrl+shift+c",
    "command": "editor.action.clipboardCopyAction"
  },
  {
    "key": "ctrl+shift+v",
    "command": "editor.action.clipboardPasteAction"
  },
  {
    "key": "ctrl+shift+x",
    "command": "editor.action.clipboardCutAction"
  },
  {
    "key": "backspace",
    "command": "deleteLeft",
    "when": "textInputFocus"
  },
  // Terminal like tab management
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "ctrl+shift+l",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+shift+o",
    "command": "workbench.action.toggleEditorGroupLayout"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusFirstEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+j",
    "command": "terminal.focus",
    "when": "editorFocus && terminal.visible"
  },
  // Terminal management and navigation
  {
    "key": "ctrl+t",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.terminal.scrollDown"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.terminal.scrollUp"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus && terminalIsOpen"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus && terminalIsOpen"
  },
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalIsOpen"
  },
  {
    "key": "ctrl+shift+l",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalIsOpen"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus && terminalIsOpen"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  // Search and replace
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.replaceInFiles"
  },
  {
    "key": "ctrl+f",
    "command": "-vscode-neovim.send"
  },
  {
    "key": "ctrl+f",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  // Other
  {
    "key": "alt+e",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+,",
    "command": "editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+[",
    "command": "editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+]",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+m",
    "command": "editor.action.toggleMinimap"
  },
  {
    "key": "alt+d",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+=",
    "command": "workbench.action.zoomIn"
  },
  {
    "key": "ctrl+shift+-",
    "command": "workbench.action.zoomOut"
  },
  // File explorer actions
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "v",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "n",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+n",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Sidebars
  {
    "key": "alt+a",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "alt+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "escape", // exit sidebar
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "sideBarFocus"
  },
  {
    "key": "escape", // exit auxiliary bar
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "auxiliaryBarFocus"
  },
  {
    "key": "shift+meta+capslock", // close sidebar
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarVisible && sideBarFocus"
  },
  {
    "key": "shift+meta+capslock", // close auxiliary bar
    "command": "workbench.action.toggleAuxiliaryBar",
    "when": "auxiliaryBarVisible && auxiliaryBarVisible"
  },
  {
    "key": "ctrl+b f", // focus file in explorer
    "command": "workbench.files.action.showActiveFileInExplorer"
  },
  {
    "key": "ctrl+b o", // focus outline
    "command": "outline.focus"
  },
  {
    "key": "ctrl+b t", // focus timeline
    "command": "timeline.focus"
  },
  // Activity bar navigation
  {
    "key": "ctrl+j",
    "command": "workbench.action.nextSideBarView",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.previousSideBarView",
    "when": "sideBarFocus"
  },
  // ===========================================================================
  // Match neovim mappings
  // ===========================================================================
  // Other
  {
    "key": "alt+e",
    "command": "workbench.action.quickOpen"
  },
  // Buffer manipulation
  {
    "key": "alt+e",
    "command": "workbench.action.showAllEditors"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "key": "shift+h",
    "command": "workbench.action.previousEditorInGroup",
    "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording"
  },
  {
    "key": "shift+l",
    "command": "workbench.action.nextEditorInGroup",
    "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording"
  },
  {
    "key": "alt+t",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "alt+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "alt+q",
    "command": "workbench.action.closeAllEditors"
  },
  // Quickly switch between windows
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusAboveGroup",
    "when": "multipleEditorGroups && editorFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.focusBelowGroup",
    "when": "multipleEditorGroups && editorFocus"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusLeftGroup",
    "when": "multipleEditorGroups && editorFocus"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusRightGroup",
    "when": "multipleEditorGroups && editorFocus"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusActivityBar",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+right",
    "command": "workbench.action.focusActivityBar",
    "when": "sideBarFocus"
  },
  // Vscode-neovim bug workaround: use neovim's scrolling
  {
    "key": "ctrl+d",
    "command": "vscode-neovim.send",
    "args": "<C-D>",
    "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording"
  },
  {
    "key": "ctrl+u",
    "args": "<C-U>",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording"
  },
  // ===========================================================================
  // Match neovim plugin mappings
  // ===========================================================================
  // expand-region
  // {
  //   "key": "alt+=",
  //   "command": "editor.action.smartSelect.expand",
  // },
  // {
  //   "key": "alt+-",
  //   "command": "editor.action.smartSelect.shrink",
  // },
  {
    "key": "alt+=",
    "args": "<A-=>",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording"
  },
  {
    "key": "alt+-",
    "args": "<A-->",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording"
  },
  // code-runner
  {
    "key": "alt+r",
    "command": "code-runner.run"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  // nerdtree
  {
    "key": "alt+n",
    "command": "workbench.view.explorer",
    "when": "!explorerViewletVisible"
  },
  {
    "key": "alt+n",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "explorerViewletVisible"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusSideBar",
    "when": "activeEditorGroupLast && editorFocus"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusAuxiliaryBar",
    "when": "activeEditorGroupIndex == 1 && editorFocus && auxiliaryBarVisible"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusFirstEditorGroup",
    "when": "auxiliaryBarFocus"
  },
  // ===========================================================================
  // Other
  // ===========================================================================
  {
    "key": "alt+p",
    "command": "commands.openAsQuickPick"
  },
  // Lists navigation
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "tab",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "shift+tab",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // Quck fix navigation (not possible without extension)
  {
    "key": "ctrl+.",
    "command": "keyboard-quickfix.openQuickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+p",
    "command": "-list.focusUp",
    "when": "inReferenceSearchEditor && neovim.mode == 'normal'"
  },
  {
    "key": "ctrl+p",
    "command": "-list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-list.focusDown",
    "when": "inReferenceSearchEditor && neovim.mode == 'normal'"
  },
  {
    "key": "ctrl+n",
    "command": "-list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // {
  //   "key": "ctrl+l",
  //   "command": "workbench.action.terminal.focusNextPane",
  //   "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  // },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusRightGroup",
    "when": "multipleEditorGroups && editorFocus"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "key": "alt+down",
    "command": "-workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  // {
  //   "key": "ctrl+h",
  //   "command": "workbench.action.terminal.focusPreviousPane",
  //   "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  // },
  {
    "key": "alt+up",
    "command": "-workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  // TEMPORARY
  {
    "key": "ctrl+enter",
    "command": "settings.cycle.copilot",
    "when": "editorFocus"
  },
  {
    "key": "alt+f",
    "command": "workbench.action.findInFiles"
  },
  {
    "key": "ctrl+shift+f",
    "command": "-workbench.action.findInFiles"
  },
  {
    "key": "alt+o",
    "command": "workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  }
]
